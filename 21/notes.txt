# Set pointer to the second register
#ip 2

# Verify we're using bitwise operations properly
IP0: r[1] = 123
IP1: r[1] = r[1] & 456
IP2: r[1] = r[1] == 72
IP3: r[2] += r[1] # If bitwise ops are correct, break out of the loop
IP4: r[2] = 0

# Do some bitwise magic
IP5: r[1] = 0 # First post-check statement
IP6: r[3] = r[1] | 65536
IP7: r[1] = 10905776
IP8: r[4] = r[3] & 255  # Sets r[4] to r[3] % 256
IP9: r[1] += r[4]
IP10: r[1] = r[1] & 16777215  # Sets r[1] to r[1] % 16777215
IP11: r[1] *= 65899  # This number is prime
IP12: r[1] = r[1] & 16777215  # Sets r[1] to r[1] % 16777215

# If the value of r[3] is less than 256, jump to IP28
IP13: r[4] = 256 > r[3]
IP14: r[2] += r[4]
IP15: r[2] += 1
IP16: r[2] = 27

# Reset r[4] to 0
IP17: r[4] = 0

# Set r[5] to (r[4] + 1)*256
IP18: r[5] = r[4] + 1
IP19: r[5] *= 256

# If r[5] > r[3], jump to IP 26, otherwise increment r[4] and return to IP18
IP20: r[5] = r[5] > r[3]
IP21: r[2] += r[5]
IP22: r[2] += 1
IP23: r[2] = 25
IP24: r[4] += 1
IP25: r[2] = 17

# Set r[3] to the value of r[4] (which was the value where (r[4] + 1) * 256 > r[3]),
#  then return to IP8
IP26: r[3] = r[4]
IP27: r[2] = 7

# If r[1] == r[0], halt, otherwise return to IP6
IP28: r[4] = r[1] == r[0]
IP29: r[2] += r[4]
IP30: r[2] = 5

Answer 1: Solved by printing the first time we hit IP28, and making r[0] match r[1] at that point
Answer 2: Observed that some sort of modular multiplication was happening, stored all r[0] potential values
 in a set and then selected the last non-duplicated one we came across
