Functions
addr - Stores r[A] + r[B]  in C
addi - Stores r[A] + B in C
mulr - Stores r[A] * r[B] in C
muli - Stores r[A] * B in C
banr - Stores r[A] & r[B] in C
bani - Stores r[A] & B in C
borr - Stores r[A] | r[B] in C
bori - Stores r[A] | B in C
setr - Stores r[A] in C
seti - Stores A in C
gtir - Stores 1 in C if A > r[B] otherwise 0
gtri - Stores 1 in C if r[A] > B otherwise 0
gtrr - Stores 1 in C if r[A] > r[B] otherwise 0
eqir - Stores 1 in C if A = r[B] otherwise 0
eqri - Stores 1 in C if r[A] = B otherwise 0
eqrr - Stores 1 in C if r[A] = r[B] otherwise 0

Registers
0 1 2 3 4 5 <-- Iteration Pointer

Instructions
IP0: r[5] += 16
IP1: r[2] = 1
IP2: r[4] = 1
IP3: r[3] = r[2] * r[4]
IP4: r[3] = r[3] == r[1]
IP5: r[5] += r[3]
IP6: r[5] += 1
IP7: r[0] += r[2]
IP8: r[4] += 1
IP9: r[3] = r[4] > r[1]
IP10: r[5] += r[3]
IP11: r[5] = 2
IP12: r[2] += 1
IP13: r[3] = r[2] > r[1]
IP14: r[5] += r[3]
IP15: r[5] = 1
IP16: r[5] *= r[5]
IP17: r[1] += 2
IP18: r[1] *= r[1]
IP19: r[1] *= r[5]
IP20: r[1] *= 11
IP21: r[3] += 6
IP22: r[3] *= r[5]
IP23: r[3] += 15
IP24: r[1] += r[3]
IP25: r[5] += r[0]
IP26: r[5] = 0
IP27: r[3] = r[5]
IP28: r[3] *= r[5]
IP29: r[3] += r[5]
IP30: r[3] *= r[5]
IP31: r[3] *= 14
IP32: r[3] *= r[5]
IP33: r[1] += r[3]
IP34: r[0] = 0
IP35: r[5] = 0



Program
1. Initial loop (instructions 3,4,5,6,8,9,10,11) - breaks when r[4] > r[1]
  a. Near breakout - [0, 10551383, 1, 0, 10551380, 9]
  b. Breakout consists of skipping from 10 to 12
  c. When breaking out, 7 is executed if r[2] * r[4] == r[1]
2. Second loop (instructions 10, 12, 13, 14, 15 then returns to loop 1) - breaks when r[2] > r[1]
  a. Near breakout - [1, 10551383, 2, 0, 10551380, 9]
  b. Breakout consists of skipping from 14 to 16
  c. Loops when instruction 15 sets ip back to 2, which sets r[4] back to 1 and begins loop 1 again

Thoughts
1. Try pattern detecting and boosting, eg. when loop 1 has occurred several times in a row, increment
   by 10551380 instead of 1

2. r[7] is executed whenever r[2] * r[4] == 10551383, and then r[0] is increased by r[2]
  a) 10551383 factors to 43 x 59 x 4159
  b) This will increment by each divisor as r[2] is that divisor
  c) So the total should be the sum of divisors - 10982400
